#include "Rocket.h"Rocket::Rocket(void)  :_targetRotation(0),_dr(0),_ar(0),_vr(0),_rotationSpring(0.2f),_rotationDamping(0.5f),_pivot(ccp(-1,-1)),_rotationOrientation(ROTATE_NONE){    this->reset();       }Rocket::~Rocket(void){}Rocket* Rocket::create () {	Rocket * sprite = new Rocket();    	if (sprite && sprite->initWithSpriteFrameName("smallfreighterspr.png")) {		sprite->autorelease();        sprite->setRadius(sprite->boundingBox().size.height * 0.5f);        return sprite;	}	CC_SAFE_DELETE(sprite);	return NULL;}void Rocket::reset () {        _speed = 50;	_pivot = ccp(-1,1);        _rotationOrientation = ROTATE_NONE;    this->setRotation(0);    	_targetRotation = 90;        float angle = CC_DEGREES_TO_RADIANS(_targetRotation);	_vector = ccp (_speed * cos( angle ),				   _speed * sin( angle ));}			void Rocket::update (float dt) {    CCPoint position = this->getPosition();    //    if (_rotationOrientation == ROTATE_NONE) {//        position.x += _vector.x * dt;//        position.y += _vector.y * dt;    //    if (_targetRotation > this->getRotation() + 180) {//        _targetRotation -= 360;//    }//    if (_targetRotation < this->getRotation() - 180) {//        _targetRotation += 360;//    }    this->setPosition(position);//    _dr = _targetRotation - this->getRotation();//    _ar = _dr * _rotationSpring;//    _vr += _ar ;//    _vr *= _rotationDamping;//    m_fRotation += _vr ;	}void Rocket::select(bool flag) {        }bool Rocket::collidedWithSides() {        CCSize screenSize = CCDirector::sharedDirector()->getWinSize();            if (m_tPosition.x > screenSize.width - _radius) {        m_tPosition.x =  screenSize.width - _radius;        _rotationOrientation = ROTATE_NONE;        _vector = ccp (this->getVector().x * -1, this->getVector().y);        this->setRotationFromVector();        return true;    }        if (m_tPosition.x < _radius) {        m_tPosition.x =  _radius;       	_rotationOrientation =  ROTATE_NONE;        _vector =  ccp (this->getVector().x * -1, this->getVector().y);        this->setRotationFromVector();        return true;            }        if (m_tPosition.y < _radius) {        m_tPosition.y = _radius;       	_rotationOrientation = ROTATE_NONE;        _vector =  ccp (this->getVector().x, this->getVector().y * -1);        this->setRotationFromVector();        return true;    }        if (m_tPosition.y > screenSize.height - _radius) {        m_tPosition.y =  screenSize.height - _radius;       	_rotationOrientation = ROTATE_NONE;        _vector =  ccp (this->getVector().x, this->getVector().y * -1);        this->setRotationFromVector();        return true;    }        return false;}